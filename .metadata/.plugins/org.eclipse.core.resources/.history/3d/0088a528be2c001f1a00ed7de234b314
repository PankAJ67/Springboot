package com.UserCrud.UserServiceImpl;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.UserCrud.UserDto.UserDto;
import com.UserCrud.UserEntity.User;
import com.UserCrud.UserRepo.UserRepository;
import com.UserCrud.UserService.UserService;

@Service
public class UserServiceImpl implements UserService {
	@Autowired
	private UserRepository userRepo;
	
	@Autowired
	private ModelMapper modelMapper;

	@Override
	public UserDto createUser(UserDto userDTO) {
        User user = this.modelMapper.map(userDTO, User.class);
        User savedUser = userRepo.save(user);
        return modelMapper.map(savedUser, UserDto.class);

	}

	@Override
	public UserDto getUserById(Long id) {
		   User user = userRepo.findById(id).
				   orElseThrow(() -> new RuntimeException("User not found"));
	        return modelMapper.map(user,UserDto.class);

	}

	@Override
	public List<UserDto> getAllUsers() {
		 return userRepo.findAll().stream()
				 .map(user ->  modelMapper.map(user, UserDto.class))
				 	            	                .collect(Collectors.toList());
		
	}

	@Override
	public UserDto updateUser(Long id, UserDto userDTO) {
		  User user = userRepo.findById(id).orElseThrow(() -> new RuntimeException("User not found"));
	        user.setEmail(userDTO.getEmail());
	        user.setPhoneNumber(userDTO.getPhoneNumber());
	        user.setName(userDTO.getName());
	        user.setOtp(userDTO.getOtp());

	        User updatedUser = userRepo.save(user);
	        return modelMapper.map(updatedUser, UserDto.class);
	        		
	}

	@Override
	public void deleteUser(Long id) {
		   User user = userRepo.findById(id).orElseThrow(() -> new RuntimeException("User not found"));
	        userRepo.delete(user);

	}

	@Override
	public void generateAndSendOtp(String email) {
	    Optional<User> optionalUser = userRepo.findByEmail(email);
        User user;
        if (optionalUser.isPresent()) {
            user = optionalUser.get();
        } else {
            user = new User();
            user.setEmail(email);
        }
        String otp = generateOtpA();
        user.setOtp(otp);
        user.setOtpGeneratedTime(LocalDateTime.now());
        userRepo.save(user);
    }
		
	

	private String generateOtpA() {
	    Random random = new Random();
        int otp = 1000 + random.nextInt(9000); // Generate a 4-digit number
        return String.valueOf(otp);
	}

	@Override
	public boolean isOtpValid(String email, String otp) {
	    User user = userRepo.findByEmail(email).orElseThrow(() -> new RuntimeException("Email not found"));
        if (user.getOtp() != null && user.getOtp().equals(otp)) {
            return true;
        }
        return false;
	}

	@Override
	public void invalidateExpiredOtps() {
	    List<User> users = userRepo.findAll();
        LocalDateTime now = LocalDateTime.now();
        for (User user : users) {
            if (user.getOtpGeneratedTime() != null && user.getOtpGeneratedTime().isBefore(now.minusMinutes(1))) {
                user.setOtp(null);
                userRepo.save(user);
            }
        }
    }


	
	}


