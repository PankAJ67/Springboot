package com.hrms.controller;
import java.io.IOException;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.hrms.dto.ApiResponse;
import com.hrms.dto.AttendenceDto;
import com.hrms.dto.DocResponse;
import com.hrms.dto.EmployeeDTO;
import com.hrms.service.AttendenceService;
import com.hrms.service.EmployeeService;
import com.hrms.service.FileService;
    
	@RestController
	@RequestMapping("/api/employees")
	public class EmployeeController {
		@Autowired
		private EmployeeService employeeService;
		
		@Autowired
		private AttendenceService attendenceService;
		
		@Autowired
		private FileService fileService;
		
		@Value("${emp.document.image.path}")
		private String docUploadPath;

//		create user
		@PostMapping("/")
		public ResponseEntity<EmployeeDTO> createUser(@RequestBody EmployeeDTO employeeDTO) {
			EmployeeDTO createdUserDto = this.employeeService.createEmployee(employeeDTO);
			return new ResponseEntity<>(createdUserDto, HttpStatus.CREATED);
		}

//		update user
		@PutMapping("/{id}")
		public ResponseEntity<EmployeeDTO> updateEmployee(@RequestBody EmployeeDTO employeeDTO,
				@PathVariable("id") Long employeeId) {
			EmployeeDTO updatedUser = this.employeeService.updateEmployee(employeeDTO, employeeId);
			return ResponseEntity.ok(updatedUser);
		}

//		delete user
		@DeleteMapping("/{id}")
		public ResponseEntity<ApiResponse> deleteEmployee(@PathVariable Long id) {
			this.employeeService.deleteEmployee(id);
			return new ResponseEntity<ApiResponse>(new ApiResponse
					("User deleted Successfully...", true, null), HttpStatus.OK);
		}

//		get all users
		@GetMapping("/")
		public ResponseEntity<List<EmployeeDTO>> getAllEmployees() {
			return ResponseEntity.ok(this.employeeService.getAllEmployees());
		}

//		get user by id
		@GetMapping("/{id}")
		public ResponseEntity<EmployeeDTO> getEmployeeById(@PathVariable Long id) {
			return ResponseEntity.ok(this.employeeService.getEmployeeById(id));
		}
		
//      create attendance with employee
		@PostMapping("/{employeeId}/attendence")
		public ResponseEntity<AttendenceDto> createAttendenceWithEmployee(
				@PathVariable("employeeId") Long employeeId,
				@RequestBody AttendenceDto dto
				){
			
			AttendenceDto attendenceWithEmployee=attendenceService.createWithEmployee
					(dto, employeeId);
			return new ResponseEntity<>(attendenceWithEmployee,HttpStatus.CREATED);
		}
		
//      upload documents
		@PostMapping("/doc/{employeeId}")
		public ResponseEntity<DocResponse> uploadEmpDoc(@RequestParam("empDoc") MultipartFile doc,
				@PathVariable Long employeeId) throws IOException{
			String documents= fileService.uploadFile(doc, docUploadPath);
			
			EmployeeDTO employee= employeeService.getEmployeeById(employeeId);
			
			employee.setDocuments(documents);
			
			EmployeeDTO employeeDTO= employeeService.updateEmployee(employee, employeeId);
		      
		    DocResponse docResponse= DocResponse.builder().documents(documents).success(true).
		    		  status(HttpStatus.CREATED).build();
		    
		        
		      
		    return new ResponseEntity<>(docResponse,HttpStatus.CREATED);
		      
			}
		
//	    serve documents	
		
		
		
		
		
		
	}

